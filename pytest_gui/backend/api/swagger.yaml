openapi: 3.0.0
info:
  description: "OpenAPI file that describes pytest-gui api"
  version: "1.0.0"
  title: "OpenAPI REST Article"

servers:
  - url: "/api"
    description: "API server"

paths:
  /discover:
    get:
      operationId: "discover.get"
      tags:
        - "Actions"
      summary: "The tests data structure supported by the server application"
      description: "Get the list of tests"
      responses:
        200:
          description: "Successfully got test list operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Test"

  /markers:
    get:
      operationId: "markers.get"
      tags:
        - "Markers"
      summary: "The test markers registered"
      description: "Get the list of markers"
      responses:
        200:
          description: "Successfully got marker list operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Marker"

  /test:
    get:
      operationId: "test.get"
      tags:
        - "Tests"
      summary: "Get all tests"
      description: "Get the list of tests"
      responses:
        200:
          description: "Successfully got test list operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Test"

  /select:
    put:
      operationId: "test.select"
      tags:
        - "Tests"
      summary: "Selects a test"
      description: "Select tests to run"
      requestBody:
        description: "The tests to update."
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "selected"
              properties:
                name:
                  type: string
                module:
                  type: string
                selected:
                  type: boolean
      responses:
        201:
          description: "Selected"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Test"

  /run:
    get:
      operationId: "test.run"
      tags:
        - "Actions"
      summary: "Run tests"
      description: "Run the tests"
      responses:
        200:
          description: "Successfully started running tests"

  /stop:
    get:
      operationId: "test.stop"
      tags:
        - "Actions"
      summary: "Stop tests"
      description: "Stop the tests"
      responses:
        200:
          description: "Successfully stopped running tests"

  /status:
    get:
      operationId: "streams.status"
      tags:
        - "Streams"
      summary: "Stream test results"
      description: "Stream the test results"
      responses:
        200:
          description: "Successfully stream running test results"
          content:
            text/event-stream:
              schema:
                type: string

  /logs:
    get:
      operationId: "streams.logs"
      tags:
        - "Streams"
      summary: "Stream test logs"
      description: "Stream the test logs"
      responses:
        200:
          description: "Successfully stream running test logs"
          content:
            text/event-stream:
              schema:
                type: string

components:
  schemas:
    Test:
      type: object
      properties:
        nodeid:
          type: string
        module:
          type: string
        file:
          type: string
        id:
          type: string
        markers:
          type: array
          items:
            $ref: "#/components/schemas/Marker"
        selected:
          type: boolean

    Marker:
      type: object
      properties:
        name:
          type: string

    TestStatus:
      type: object
      properties:
        nodeid:
          type: string
        outcome:
          type: string
          enum: ["passed", "failed", "skipped"]
        when:
          type: string
          enum: ["setup", "call", "teardown"]
        duration:
          type: string
